{{- if .Values.app.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-rp-businessentity-app-deploy" .Release.Name }} 
  namespace: {{ include "business-entity-microservice.namespace" . }}
  labels:
    {{- include "business-entity-microservice.labels" . | nindent 4 }}
    app: {{ printf "%s-rp-businessentity-app-deploy" .Release.Name }}
spec:
  replicas: {{ .Values.app.replicaCount | default 1 }}
  selector:
    matchLabels:
      app: {{ printf "%s-rp-businessentity-app-deploy" .Release.Name }}
  strategy: {}
  template:
    metadata:
      labels:
        app: {{ printf "%s-rp-businessentity-app-deploy" .Release.Name }}
    spec:
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: {{ printf "%s-rp-businessentity-app-deploy" .Release.Name }}
      initContainers:
      # Wait for MySQL Service to be reachable
      - name: wait-for-mysql
        image: busybox:1.35
        command:
        - sh
        - -c
        - >
          until nc -z $MYSQL_HOST $MYSQL_PORT; do
            echo "Waiting for MySQL at $MYSQL_HOST:$MYSQL_PORT...";
            sleep 5;
          done;
          echo "MySQL is ready!";
        env:
        - name: MYSQL_HOST
          {{- if and (hasKey .Values "global") (hasKey .Values.global "beDBRef") (ne .Values.global.beDBRef "") }}
          valueFrom:              
            secretKeyRef:                
              name: {{ .Values.global.beDBRef }}
              key: DB_HOST
          {{- else }}
          value: {{ printf "%s-rp-businessentity-sql-svc" .Release.Name }}
          {{- end }}
        - name: MYSQL_PORT
          {{- if and (hasKey .Values "global") (hasKey .Values.global "beDBRef") (ne .Values.global.beDBRef "") }}
          valueFrom:              
            secretKeyRef:                
              name: {{ .Values.global.beDBRef }}
              key: DB_PORT
          {{- else }}
          value: "3306"
          {{- end }}

      # Wait for Redis Service to be reachable
      - name: wait-for-redis
        image: redis:7.2
        command:
        - sh
        - -c
        - >
          until redis-cli -h {{ printf "%s-rp-businessentity-redis-svc" .Release.Name }}  -p 6379 -a $$REDIS_PASSWORD ping; do
            echo "Waiting for Redis at {{ printf "%s-rp-businessentity-redis-svc" .Release.Name }}:6379...";
            sleep 5;
          done;
          echo "Redis is ready!";
        ports:
        - containerPort: {{ .Values.app.port }}
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ printf "%s-rp-businessentity-redis-secret" .Release.Name }}
              key: REDIS_PASSWORD
        - name: REDIS_HOST
          value: {{ printf "%s-rp-businessentity-redis-svc" .Release.Name }}
        - name: REDIS_PORT
          value: "6379"
      containers:
      - image: {{ .Values.app.image }}:{{ .Values.global.imageTag | default .Values.app.imageTag }}
        name: {{ printf "%s-rp-businessentity-app-pod" .Release.Name }}
        imagePullPolicy: {{ .Values.app.imagePullPolicy }}        
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ printf "%s-rp-businessentity-redis-secret" .Release.Name }}
              key: REDIS_PASSWORD        
        {{- if and (hasKey .Values "global") (hasKey .Values.global "beDBRef") (ne .Values.global.beDBRef "") }}
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.beDBRef }}
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.beDBRef }}
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.beDBRef }}
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.beDBRef }}
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.beDBRef }}
              key: DB_PASSWORD
        {{- else }}
        - name: DB_HOST
          value: {{ printf "%s-rp-businessentity-sql-svc" .Release.Name }}
        - name: DB_PORT
          value: "3306"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ printf "%s-rp-businessentity-sql-secret" .Release.Name }}
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ printf "%s-rp-businessentity-sql-secret" .Release.Name }}
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ printf "%s-rp-businessentity-sql-secret" .Release.Name }}
              key: DB_PASSWORD
        {{- end }}
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: {{ .Values.app.port }}
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: {{ .Values.app.port }}
          initialDelaySeconds: 30
          periodSeconds: 5
        resources: {}
        volumeMounts:
        - name: config-volume
          mountPath: /app/config        
      volumes:
      - name: config-volume
        configMap:
          name: {{ printf "%s-rp-businessentity-app-cm" .Release.Name }}
{{- end }}