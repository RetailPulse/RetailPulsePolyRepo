{{- if .Values.app.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-rp-user-app-deploy" .Release.Name }}
  namespace: {{ include "user.namespace" . }}
  labels:
    {{- include "user.labels" . | nindent 4 }}
    app: {{ printf "%s-rp-user-app-deploy" .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ printf "%s-rp-user-app-deploy" .Release.Name }}
  strategy: {}
  template:
    metadata:
      labels:
        app: {{ printf "%s-rp-user-app-deploy" .Release.Name }}
    spec:
      initContainers:
        - name: wait-for-mysql
          image: busybox:1.35
          command:
          - sh
          - -c
          - >
            until nc -z $MYSQL_HOST $MYSQL_PORT; do
              echo "Waiting for MySQL at $MYSQL_HOST:$MYSQL_PORT...";
              sleep 5;
            done;
            echo "MySQL is ready!";
          env:
          - name: MYSQL_HOST
            {{- if and (hasKey .Values "global") (hasKey .Values.global "userDBRef") (ne .Values.global.userDBRef "") }}
            valueFrom:              
              secretKeyRef:                
                name: {{ .Values.global.userDBRef }}
                key: DB_HOST
            {{- else }}
            value: {{ printf "%s-rp-user-sql-svc" .Release.Name }}
            {{- end }}
          - name: MYSQL_PORT
            {{- if and (hasKey .Values "global") (hasKey .Values.global "userDBRef") (ne .Values.global.userDBRef "") }}
            valueFrom:              
              secretKeyRef:                
                name: {{ .Values.global.userDBRef }}
                key: DB_PORT
            {{- else }}
            value: "3306"
            {{- end }}
      containers:
      - image: {{ .Values.app.image }}:{{ .Values.global.imageTag | default .Values.app.imageTag }}
        name: {{ printf "%s-rp-user-app-pod" .Release.Name }}
        imagePullPolicy: {{ .Values.app.imagePullPolicy }}
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        ports:
        - containerPort: {{ .Values.app.port }}
        env:
        {{- if and (hasKey .Values "global") (hasKey .Values.global "userDBRef") (ne .Values.global.userDBRef "") }}
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.userDBRef }}
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.userDBRef }}
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.userDBRef }}
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.userDBRef }}
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.userDBRef }}
              key: DB_PASSWORD
        {{- else }}
        - name: DB_HOST
          value: {{ printf "%s-rp-user-sql-svc" .Release.Name }}
        - name: DB_PORT
          value: "3306"
        - name: DB_NAME
          valueFrom: 
            secretKeyRef:
              name: {{ printf "%s-rp-user-sql-secret" .Release.Name }}
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ printf "%s-rp-user-sql-secret" .Release.Name }}
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ printf "%s-rp-user-sql-secret" .Release.Name }}
              key: DB_PASSWORD
        {{- end }}
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: {{ .Values.app.port }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: {{ .Values.app.port }}
          initialDelaySeconds: 20
          periodSeconds: 5
        resources: {}
      volumes:
      - name: config-volume
        configMap:
          name: {{ printf "%s-rp-user-app-cm" .Release.Name }}
{{- end }}            